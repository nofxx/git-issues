#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'thor'
require 'zlog'
require 'git-issues'

Zlog.init_stdout loglevel: :debug

class GitIssuesCLI < Thor
  Log = Logging.logger[self]
  GI = GitIssues.new

  desc "list", "list issues of a repository"
  method_options :all => :boolean
  method_options :short => :boolean
  def list opts = {}
    o = ({
      all: (options.all)
    }).merge(opts)

    issues = repo.issues_list o
    issues.sort_by{|i| i['number']}.reverse.each do |i|
      print Rainbow("##{i['number']} ".rjust(7, ' ')).red
      print Rainbow(" | #{i['state'][0,6]} | ").color(color_for_state(i['state']))
      print Rainbow(i['title'] + ' ') #.color('#888888')

      print Rainbow('@' + i['assignee']).color('#888888') if i['assignee']
      if i['labels'] && !i['labels'].empty?
        print Rainbow(" [" + i['labels'].join(' ') + "] ").black
      end
      puts Rainbow(i['update'].strftime('%d/%b/%y')).black
      if not options.short
        puts "      %s" % i['description'] if i['description'].to_s.length > 0
        puts Rainbow('-' * 29).black
      end
    end
    nil
  end

  desc "add <title> [<content>]", "add a new issue"
  def add( title, content = nil )
    r = repo.issue_create title, content
    Log.ok "created issue #{r}" if r.instance_of?(Fixnum)
  end

  desc "reopen <id>", "reopen an issue"
  def reopen( id )
    is_ok = repo.issue_reopen id
    Log.ok "reopened issue #{id}" if is_ok
  end

  desc "delete <id>", "delete an issue"
  def delete( id )
    repo.issue_delete id
  end

  desc "close <id>", "close an issue"
  def close( id )
    is_closed = repo.issue_close id
    Log.ok "closed issue #{id}" if is_closed
  end

  desc "cli", "open a cli"
  def cli
    require 'pry'
    binding.pry
  end

  default_task "list"

  private

  def color_for_state state
    case state
    when 'opened' then :yellow
    when 'reopened' then :red
    when 'closed' then :green
    end
  end

  def repo path = '.'
    @repo ||= getRepo path
  end

  def getRepo path
    repos = GI.gitReposFor '.'
    if repos.empty?
      Log.abort "No known repositories found."
    end

    Log.info "Using: #{repos.first.repo_url}"
    #Log.info "WEB: #{repos.first.repo_url.tr(':', '/').gsub(/.*@/, 'https://').gsub('.git', '/issues')}"
    repos.first
  end

end

GitIssuesCLI.start(ARGV)
